%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Elan Tele
file_extensions:
  - et
  - ett
scope: source.et

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  comments:
    # Block comments begin with /* and ends with */
    - match: '/\*'
      scope: punctuation.definition.comment.et
      push: 
        - meta_scope: comment.block.et
        - match: '\*/'
          pop: true
    # Inline comments begin with a '//' and finish at the end of the line.
    - match: '//[^\*]'
      scope: punctuation.definition.comment.et
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.et
        - match: $\n?
          pop: true

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings
    - include: storage
    - include: operators

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(func|var|if|then|in|else|when|for|while|return|is|end|print|loop)\b'
      scope: keyword.control.et
    - match: '\b(функция|вар|әгәр|буочракта|эчендә|башкаочракта|кайчан|дәвамында|әлегә|кайтар|бу|бетте|яз|элмәк)\b'
      scope: keyword.control.ett

  numbers:
    - match: '\b([0-9]*)\b'
      scope: constant.numeric.et

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"|'''
      scope: punctuation.definition.string.begin.et
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.et
    - match: '\.'
      scope: constant.character.escape.et
    - match: '"|'''
      scope: punctuation.definition.string.end.et
      pop: true

  storage:
     - match: \b(string|int|real|bool|empty)\b
       scope: storage.type.et
     - match: \b(сүз|сан|чынсан|логик|буш)\b
       scope: storage.type.ett

  operators:
     - match: '\+|-||\*|\/||=|\/=|<=|>=|>|<|:=|\.\.|;'
       scope: keyword.operator.et
     - match: \b(and|or|not|xor)\b
       scope: keyword.operator.et
     - match: \b(һәм|яки|түгел|ияки)\b
       scope: keyword.operator.ett
